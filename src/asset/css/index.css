@import 'highlight.js/styles/atom-one-dark.css';
@import 'katex/dist/katex.min.css';

:root {
  --mui-palette-primary-main: #ff0000;
  --mui-palette-primary-light: #42a5f5;
  --mui-palette-common-white: #ffffff;
  --mui-palette-common-black: #000000;
  --mui-palette-text-primary: #21222D;
  --mui-palette-text-secondary: rgba(33, 34, 45, 0.7);
  --mui-palette-text-auxiliary: rgba(33, 34, 45, 0.5);
  --mui-palette-text-tertiary: var(--mui-palette-text-auxiliary);
  --mui-palette-text-disabled: rgba(33, 34, 45, 0.3);
  --mui-palette-background-default: #ffffff;
  --mui-palette-background-paper: #F8F9FA;
  --mui-palette-warning-main: #ed6c02;
  --mui-palette-warning-light: #ff9800;
  --mui-palette-error-main: #F64E54;
  --mui-palette-success-main: #00DF98;
  --mui-palette-divider: #ECEEF1;

  --mui-shape-borderRadius: 10px;
  --mui-spacing-unit: 8px;

  --mui-transitions-duration-short: 250ms;
  --mui-transitions-duration-standard: 300ms;
  --mui-transitions-easing-easeOut: cubic-bezier(0.0, 0, 0.2, 1);
  --mui-transitions-easing-easeInOut: cubic-bezier(0.4, 0, 0.2, 1);

  overflow-wrap: break-word;
  text-size-adjust: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.tiptap.ProseMirror label:has(input[type="checkbox"]) {
  line-height: 1;
  padding-top: 0.5rem;
}

.tiptap.ProseMirror input[type="checkbox"] {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  width: 1rem;
  height: 1rem;
  border: 2px solid var(--mui-palette-divider);
  border-radius: 4px;
  background-color: var(--mui-palette-background-default);
  cursor: pointer;
  position: relative;
  transition: all var(--mui-transitions-duration-short) var(--mui-transitions-easing-easeOut);
}

.tiptap.ProseMirror input[type="checkbox"]:checked {
  background-color: var(--mui-palette-background-paper);
}

.tiptap.ProseMirror input[type="checkbox"]:checked::after {
  content: "";
  width: 100%;
  height: 100%;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  background-color: var(--mui-palette-primary-main);
  -webkit-mask: url("data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22currentColor%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M21.4142%204.58579C22.1953%205.36683%2022.1953%206.63317%2021.4142%207.41421L10.4142%2018.4142C9.63317%2019.1953%208.36684%2019.1953%207.58579%2018.4142L2.58579%2013.4142C1.80474%2012.6332%201.80474%2011.3668%202.58579%2010.5858C3.36683%209.80474%204.63317%209.80474%205.41421%2010.5858L9%2014.1716L18.5858%204.58579C19.3668%203.80474%2020.6332%203.80474%2021.4142%204.58579Z%22%20fill%3D%22currentColor%22%2F%3E%3C%2Fsvg%3E") center/contain no-repeat;
  mask: url("data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22currentColor%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M21.4142%204.58579C22.1953%205.36683%2022.1953%206.63317%2021.4142%207.41421L10.4142%2018.4142C9.63317%2019.1953%208.36684%2019.1953%207.58579%2018.4142L2.58579%2013.4142C1.80474%2012.6332%201.80474%2011.3668%202.58579%2010.5858C3.36683%209.80474%204.63317%209.80474%205.41421%2010.5858L9%2014.1716L18.5858%204.58579C19.3668%203.80474%2020.6332%203.80474%2021.4142%204.58579Z%22%20fill%3D%22currentColor%22%2F%3E%3C%2Fsvg%3E") center/contain no-repeat;
}

.tiptap.ProseMirror input[type="checkbox"]:focus {
  outline: none;
  box-shadow: 0 0 0 2px var(--mui-palette-action-selected);
}

.tiptap.ProseMirror input[type="checkbox"]:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.tiptap.ProseMirror input[type="checkbox"]:disabled:checked {
  background-color: var(--mui-palette-text-disabled);
  border-color: var(--mui-palette-text-disabled);
}

.tiptap.ProseMirror .react-renderer {
  margin-bottom: 1rem;
  line-height: 1;
}

.tiptap.ProseMirror .react-renderer.node-image,
.tiptap.ProseMirror .react-renderer.node-inlineMath,
.tiptap.ProseMirror .react-renderer.node-attachment,
.tiptap.ProseMirror .react-renderer.node-alink {
  display: inline-block;
  vertical-align: middle;
  margin: 0 0.25rem;
}

.tiptap.ProseMirror .react-renderer.node-alink:has(.block-link-wrapper),
.tiptap.ProseMirror .react-renderer.node-attachment:has(.block-attachment-wrapper) {
  display: block;
  margin-bottom: 1rem;
}

.tiptap.ProseMirror p :first-child:is(.react-renderer.node-image),
.tiptap.ProseMirror p :first-child:is(.react-renderer.node-inlineMath) {
  margin-left: 0;
}

.tiptap.ProseMirror .video-wrapper,
.tiptap.ProseMirror .image-wrapper {
  line-height: 0;
}

.tiptap.ProseMirror .image-wrapper img {
  vertical-align: middle;
}